{{- $cassandraPassword := .Values.authCredentials.cassandra.password | trim }}
{{- $ycqlUser := .Values.authCredentials.ycql.user | trim }}
{{- $ysqlUser := .Values.authCredentials.ysql.user | trim }}
{{- $yugabytePassword := .Values.authCredentials.yugabyte.password | trim }}
{{- if or (and $cassandraPassword (not (eq $cassandraPassword "cassandra"))) .Values.authCredentials.cassandra.existingSecret (and $ycqlUser (not (eq $ycqlUser "cassandra"))) .Values.authCredentials.ycql.password .Values.authCredentials.ycql.keyspace .Values.authCredentials.ycql.existingSecret .Values.authCredentials.ysql.password (and $ysqlUser (not (eq $ysqlUser "yugabyte"))) .Values.authCredentials.ysql.database .Values.authCredentials.ysql.existingSecret (and $yugabytePassword (not (eq $yugabytePassword "yugabyte"))) .Values.authCredentials.yugabyte.existingSecret }}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "yugabyte.fullname" . }}-setup-credentials
  namespace: "{{ .Release.Namespace }}"
  labels:
    app: "setup-credentials"
    release: {{ .Release.Name | quote }}
    chart: "{{ .Chart.Name }}"
    component: "{{ .Values.Component }}"
  annotations:
    "helm.sh/hook": post-install
    "helm.sh/hook-weight": "0"
    "helm.sh/hook-delete-policy": hook-succeeded
spec:
  backoffLimit: 2
  template:
    metadata:
      name: "setup-credentials"
      labels:
        app: "setup-credentials"
        release: {{ .Release.Name | quote }}
        chart: "{{ .Chart.Name }}"
        component: "{{ .Values.Component }}"
      {{- if and .Values.istioCompatibility.enabled .Values.istioCompatibility.excludeYsqlPortDuringCredentialsSetup }}
      annotations:
        {{- range .Values.Services }}
        {{- if hasKey .ports "tcp-ysql-port" }}
        traffic.sidecar.istio.io/excludeOutboundPorts: '{{ get .ports "tcp-ysql-port" | default 5433 }}'
        {{- end }}
        {{- end }}
      {{- end }}
    spec:
      restartPolicy: Never
      containers:
      - name: setup-credentials
        image: "{{ .Values.Image.repository }}:{{ .Values.Image.tag }}"
        env:
        {{- if and $cassandraPassword (not (eq $cassandraPassword "cassandra")) }}
        - name: CASSANDRA_USER_NEW_PASSWORD
          value: "{{ $cassandraPassword }}"
        {{- end }}
        {{- if .Values.authCredentials.ysql.user }}
        - name: YSQL_USER
          value: "{{ .Values.authCredentials.ysql.user | trim }}"
        {{- end }}
        {{- if .Values.authCredentials.ysql.password }}
        - name: YSQL_PASSWORD
          value: "{{ .Values.authCredentials.ysql.password | trim }}"
        {{- end }}
        {{- if .Values.authCredentials.ysql.database }}
        - name: YSQL_DB
          value: "{{ .Values.authCredentials.ysql.database | trim }}"
        {{- end }}
        {{- if .Values.authCredentials.ycql.user }}
        - name: YCQL_USER
          value: "{{ .Values.authCredentials.ycql.user | trim }}"
        {{- end }}
        {{- if .Values.authCredentials.ycql.password }}
        - name: YCQL_PASSWORD
          value: "{{ .Values.authCredentials.ycql.password | trim }}"
        {{- end }}
        {{- if .Values.authCredentials.ycql.keyspace }}
        - name: YCQL_KEYSPACE
          value: "{{ .Values.authCredentials.ycql.keyspace | trim }}"
        {{- end }}
        {{- if and $yugabytePassword (not (eq $yugabytePassword "yugabyte")) }}
        - name: YUGABYTE_USER_NEW_PASSWORD
          value: "{{ $yugabytePassword }}"
        {{- end }}
        {{- if .Values.tls.enabled }}
        - name: SSL_CERTFILE
          value: "/root/.yugabytedb/root.crt"
        {{- end }}
        command:
        - 'bash'
        - '/home/yugabyte/bin/setup-credentials/setup-credentials.sh'
        volumeMounts:
        - name: setup-credentials-script
          mountPath: "/home/yugabyte/bin/setup-credentials"
        {{- if .Values.authCredentials.cassandra.existingSecret }}
        - name: yugabyte-cassandra-auth-credentials
          mountPath: "/root/.yugabytedb-auth/cassandra/"
        {{- end }}
        {{- if .Values.authCredentials.ycql.existingSecret }}
        - name: yugabyte-ycql-auth-credentials
          mountPath: "/root/.yugabytedb-auth/ycql/"
        {{- end }}
        {{- if .Values.authCredentials.ysql.existingSecret }}
        - name: yugabyte-ysql-auth-credentials
          mountPath: "/root/.yugabytedb-auth/ysql/"
        {{- end }}
        {{- if .Values.authCredentials.yugabyte.existingSecret }}
        - name: yugabyte-yugabyte-auth-credentials
          mountPath: "/root/.yugabytedb-auth/yugabyte/"
        {{- end }}
        {{- if .Values.tls.enabled }}
        - name: yugabyte-tls-client-cert
          mountPath: "/root/.yugabytedb/"
        {{- end }}
      volumes:
      - name: setup-credentials-script
        configMap:
          name: {{ include "yugabyte.fullname" . }}-setup-credentials-script
      {{- if .Values.authCredentials.cassandra.existingSecret }}
      - name: yugabyte-cassandra-auth-credentials
        secret:
          secretName: {{ .Values.authCredentials.cassandra.existingSecret | trim }}
          defaultMode: 256
      {{- end }}
      {{- if .Values.authCredentials.ycql.existingSecret }}
      - name: yugabyte-ycql-auth-credentials
        secret:
          secretName: {{ .Values.authCredentials.ycql.existingSecret | trim }}
          defaultMode: 256
      {{- end }}
      {{- if .Values.authCredentials.ysql.existingSecret }}
      - name: yugabyte-ysql-auth-credentials
        secret:
          secretName: {{ .Values.authCredentials.ysql.existingSecret | trim }}
          defaultMode: 256
      {{- end }}
      {{- if .Values.authCredentials.yugabyte.existingSecret }}
      - name: yugabyte-yugabyte-auth-credentials
        secret:
          secretName: {{ .Values.authCredentials.yugabyte.existingSecret | trim }}
          defaultMode: 256
      {{- end }}
      {{- if .Values.tls.enabled }}
      - name: yugabyte-tls-client-cert
        secret:
          secretName: yugabyte-tls-client-cert
          defaultMode: 256
      {{- end }}
{{- end }}
